*----------------------------------------------------------------------------------------------------------------------*
+ 개요
- Database: MySQL
- Version: 8.0.15
- Schema: mvc_community
- Description: Spring MVC 기반 웹 커뮤니티 데이터베이스

+ 약어
- pk: PRIMARY KEY
- uk: UNIQUE KEY
- fk: FOREIGN KEY

+ 규칙
- uk_테이블명_필드명
- fk_테이블명_필드명
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 회원 테이블
- 비밀번호는 BCrypt 암호화로 인해 60자를 사용한다.
- 계정 권한은 C, B, A, M(관리자) 등급으로 구분한다.
- is_enabled 컬럼의 기본 값은 현재 1 이나 향후 가입 인증 로직을 추가하여 0 으로 변경해야 한다.
- 익명 계정의 계정 권한은 최소, 계정 비활성으로 지정한다.

CREATE TABLE user
(
    `id`             BIGINT(20)  NOT NULL  AUTO_INCREMENT  COMMENT '계정 번호',
    `email`          VARCHAR(40)  NOT NULL  COMMENT '계정 이메일',
    `password`       VARCHAR(60)  NOT NULL  COMMENT '계정 비밀번호',
    `name`           VARCHAR(20)  NOT NULL  COMMENT '계정 이름',
    `phone`          VARCHAR(20)  NOT NULL  COMMENT '계정 연락처',
    `nickname`       VARCHAR(20)  NOT NULL  COMMENT '계정 닉네임',
    `created_at`     TIMESTAMP  NOT NULL  DEFAULT CURRENT_TIMESTAMP  COMMENT '계정 등록 일자',
    `updated_at`     TIMESTAMP  NOT NULL  DEFAULT CURRENT_TIMESTAMP  COMMENT '계정 로그인 일자',
    `role`           VARCHAR(20)  NOT NULL  DEFAULT 'ROLE_C'  COMMENT '계정 권한',
    `is_enabled`     TINYINT(1)  NOT NULL  DEFAULT 1  COMMENT '계정 활성 상태(0: 사용 불가능, 1: 사용 가능)',
    PRIMARY KEY (id),
    UNIQUE KEY uk_user_email (email),
    UNIQUE KEY uk_user_phone (phone),
    UNIQUE KEY uk_user_nickname (nickname)
);

admin@test.com, test123!
INSERT INTO user (email, password, name, phone, nickname, role, is_enabled) VALUES ('anonymous@test.com', '$2a$10$T9JRu3Yu8ke/41Vl/Jd0aeGfq97wHBbpcU04GG7zDWOKjwBgti8aC', '익명', '00000000000', '익명', 'ROLE_C', 0);
INSERT INTO user (email, password, name, phone, nickname, role) VALUES ('admin@test.com', '$2a$10$T9JRu3Yu8ke/41Vl/Jd0aeGfq97wHBbpcU04GG7zDWOKjwBgti8aC', '관리자', '01000000000', '관리자', 'ROLE_M');
INSERT INTO user (email, password, name, phone, nickname, role) VALUES ('user1@test.com', '$2a$10$T9JRu3Yu8ke/41Vl/Jd0aeGfq97wHBbpcU04GG7zDWOKjwBgti8aC', '사용자', '01000000001', '사용자1', 'ROLE_A');
INSERT INTO user (email, password, name, phone, nickname, role) VALUES ('user2@test.com', '$2a$10$T9JRu3Yu8ke/41Vl/Jd0aeGfq97wHBbpcU04GG7zDWOKjwBgti8aC', '사용자', '01000000002', '사용자2', 'ROLE_B');
INSERT INTO user (email, password, name, phone, nickname, role) VALUES ('user3@test.com', '$2a$10$T9JRu3Yu8ke/41Vl/Jd0aeGfq97wHBbpcU04GG7zDWOKjwBgti8aC', '사용자', '01000000003', '사용자3', 'ROLE_C');
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 게시글 테이블
- user 테이블의 id 컬럼을 외래키로 사용할 경우, 게시글 목록 조회 시 JOIN 연산에 대한 비용이 발생한다.
- 외래키는 user 테이블의 nickname 컬럼을 사용한다.
(user 테이블의 nickname 컬럼 값 변경 시, 해당 테이블의 user_nickname 컬럼 값도 동시에 갱신되도록 한다.)
- like 는 MySQL 에서 예약어로 사용되므로 likes 를 사용한다.

CREATE TABLE post
(
    `id`             BIGINT(20)  NOT NULL  AUTO_INCREMENT  COMMENT '게시글 번호',
    `user_nickname`  VARCHAR(20)  NOT NULL  COMMENT '게시글 작성자',
    `type`           VARCHAR(20)  NOT NULL  COMMENT '게시글 종류',
    `title`          VARCHAR(100)  NOT NULL  COMMENT '게시글 제목',
    `content`        VARCHAR(500)  NOT NULL  COMMENT '게시글 내용',
    `created_at`     TIMESTAMP  NOT NULL  DEFAULT CURRENT_TIMESTAMP  COMMENT '게시글 등록 일자',
    `updated_at`     TIMESTAMP  NOT NULL  DEFAULT CURRENT_TIMESTAMP  COMMENT '게시글 수정 일자',
    `comments`       INT  NOT NULL  DEFAULT 0  COMMENT '게시글 댓글수',
    `views`          INT  NOT NULL  DEFAULT 0  COMMENT '게시글 조회수',
    `likes`          INT  NOT NULL  DEFAULT 0  COMMENT '게시글 추천수',
    PRIMARY KEY (id),
    FOREIGN KEY (user_nickname) REFERENCES user (nickname) ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO post (user_nickname, type, title, content) VALUES ('관리자', 'test', '테스트', '테스트');
INSERT INTO post (user_nickname, type, title, content) VALUES ('사용자1', 'test', '테스트1', '테스트a');
INSERT INTO post (user_nickname, type, title, content) VALUES ('사용자2', 'test', '테스트2', '테스트b');
INSERT INTO post (user_nickname, type, title, content) VALUES ('사용자3', 'test', '테스트3', '테스트c');
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 댓글 테이블

CREATE TABLE comment
(
    `id`             BIGINT(20)  NOT NULL  AUTO_INCREMENT  COMMENT '댓글 번호',
    `post_id`        BIGINT(20)  NOT NULL  COMMENT '게시글 번호',
    `user_nickname`  VARCHAR(20)  NOT NULL  COMMENT '댓글 작성자',
    `content`        VARCHAR(100)  NOT NULL  COMMENT '댓글 내용',
    `created_at`     TIMESTAMP  NOT NULL  DEFAULT CURRENT_TIMESTAMP  COMMENT '댓글 등록 일자',
    `updated_at`     TIMESTAMP  NOT NULL  DEFAULT CURRENT_TIMESTAMP  COMMENT '댓글 수정 일자',
    `likes`          INT  NOT NULL  DEFAULT 0  COMMENT '댓글 추천수',
    PRIMARY KEY (id),
    FOREIGN KEY (post_id) REFERENCES post (id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_nickname) REFERENCES user (nickname) ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO comment (post_id, user_nickname, content) VALUES ('407', '사용자1', '테스트');
UPDATE post SET comments = 5 WHERE id = 407;
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 게시글 추천 테이블

CREATE TABLE post_like
(
    `post_id`        BIGINT(20)  NOT NULL  COMMENT '게시글 번호',
    `user_nickname`  VARCHAR(20)  NOT NULL  COMMENT '게시글 추천자',
    PRIMARY KEY (post_id, user_nickname),
    FOREIGN KEY (post_id) REFERENCES post (id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_nickname) REFERENCES user (nickname) ON UPDATE CASCADE ON DELETE CASCADE
);
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 댓글 추천 테이블

CREATE TABLE comment_like
(
    `post_id`        BIGINT(20)  NOT NULL  COMMENT '게시글 번호',
    `comment_id`     BIGINT(20)  NOT NULL  COMMENT '댓글 번호',
    `user_nickname`  VARCHAR(20)  NOT NULL  COMMENT '댓글 추천자',
    PRIMARY KEY (post_id, comment_id, user_nickname),
    FOREIGN KEY (post_id) REFERENCES post (id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (comment_id) REFERENCES comment (id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_nickname) REFERENCES user (nickname) ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO comment_like VALUES (331, 20, '관리자');
INSERT INTO comment_like VALUES (331, 21, '관리자');
INSERT INTO comment_like VALUES (331, 22, '관리자');
INSERT INTO comment_like VALUES (331, 23, '관리자');
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 태그 테이블
- 게시글 등록 시, 태그 목록을 출력하여 사용자가 태그를 선택하거나 추가 입력할 수 있도록 한다.
- 게시글 목록에서 사용자가 선택한 태그와 일치하는 게시글만 출력할 수 있도록 한다.

CREATE TABLE tag
(
    `id`    BIGINT(20)  NOT NULL  AUTO_INCREMENT  COMMENT '태그 번호',
    `name`  VARCHAR(20)  NOT NULL  COMMENT '태그 이름',
    PRIMARY KEY (id),
    UNIQUE KEY uk_tag_name (name)
);
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 게시글 태그 테이블
- 게시글과 태그는 M:M 관계이다.

CREATE TABLE post_tag
(
    `post_id`  BIGINT(20)  NOT NULL  COMMENT '게시글 번호',
    `tag_id`  BIGINT(20)  NOT NULL  COMMENT '태그 번호',
    PRIMARY KEY (post_id, tag_id)
);
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 채팅방 테이블
- 채팅방의 개설자만 수정/삭제가 가능하다.
- 채팅방 개설 시, 정원을 지정할 수 있다.
- 동일한 사용자가 여러 개의 채팅방을 개설할 수 있다.

CREATE TABLE chat_room
(
    `id`             BIGINT(20)  NOT NULL  AUTO_INCREMENT  COMMENT '채팅방 번호',
    `name`           VARCHAR(100)  NOT NULL  COMMENT '채팅방 이름',
    `user_nickname`  VARCHAR(20)  NOT NULL  COMMENT '채팅방 개설자',
    `maximum`        INT  NOT NULL  DEFAULT 2  COMMENT '채팅방 정원',
    `created_at`     TIMESTAMP  NOT NULL  DEFAULT CURRENT_TIMESTAMP  COMMENT '채팅방 개설 일자',
    `updated_at`     TIMESTAMP  NOT NULL  DEFAULT CURRENT_TIMESTAMP  COMMENT '채팅방 수정 일자',
    PRIMARY KEY (id),
    UNIQUE KEY uk_chat_room_name (name),
    FOREIGN KEY (user_nickname) REFERENCES user (nickname) ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO chat_room (name, maximum) VALUES ('테스트 채팅방', 10);
*----------------------------------------------------------------------------------------------------------------------*

*----------------------------------------------------------------------------------------------------------------------*
+ 채팅 메시지 테이블

CREATE TABLE chat_message
(
    `id`             BIGINT(20)  NOT NULL  AUTO_INCREMENT  COMMENT '메시지 번호',
    `room_id`        BIGINT(20)  NOT NULL  COMMENT '채팅방 번호',
    `type`           VARCHAR(20)  NOT NULL  COMMENT '메시지 종류',
    `user_nickname`  VARCHAR(20)  NOT NULL  COMMENT '메시지 발송자',
    `content`        VARCHAR(500)  NOT NULL  COMMENT '메시지 내용',
    PRIMARY KEY (id, room_id),
    FOREIGN KEY (room_id) REFERENCES chat_room (id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (user_nickname) REFERENCES user (nickname) ON UPDATE CASCADE ON DELETE CASCADE
);
*----------------------------------------------------------------------------------------------------------------------*










